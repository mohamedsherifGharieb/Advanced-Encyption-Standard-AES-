org 100h

 

 MACRO SUBBYTE
    
    push di
    
    xor ax, ax
    xor cx, cx
    mov cx, 10H
    xor si, si
    MAP: mov al, INP[si]
         mov di, ax
         mov dl, SBOX[di]
         mov INP[si], dl
         inc si
         loop MAP
    pop di
    
    
    ENDM
        
 MACRO SUBBYTE1
    
    push di
    
    xor ax, ax
    xor cx, cx
    mov cx, 10H
    xor si, si
    MAP1: mov al, INP[si]
         mov di, ax
         mov dl, SBOX[di]
         mov INP[si], dl
         inc si
         loop MAP1
    pop di
    
    
    ENDM       
        
 MACRO SHIFTROWS
    
    push di
  
    mov cx, 03H
    mov si, 0CH
    mov bx, 0DH
    mov di, 0H
    mov ax, 10H

 LBIG:
    mov dl, cl
    xor di, di    
    STR: 
        mov dh, INP[si]
        mov TEMP[di], dh
        inc si
        inc di
        dec dl
        CMP dl, 00H
        JNE STR
    mov bp, cx
    sub si, bp
        
    SHIFT: 
        mov dh, INP[si + bp]
        mov INP[si], dh
        inc si
        CMP si, bx
        JNE SHIFT
    xor di, di
    
    WRT1:
        mov dh, TEMP[di]
        mov INP[si], dh
        inc si
        inc di
        CMP si, ax
        JNE WRT1
    
    sub si, 08H
    sub bx, 03H
    sub ax, 04H
    dec bp
    loop LBIG
    
    pop di
    
    ENDM
    
 MACRO SHIFTROWS1
    
    push di
  
    mov cx, 03H
    mov si, 0CH
    mov bx, 0DH
    mov di, 0H
    mov ax, 10H

 LBIG1:
    mov dl, cl
    xor di, di    
    STR1: 
        mov dh, INP[si]
        mov TEMP[di], dh
        inc si
        inc di
        dec dl
        CMP dl, 00H
        JNE STR1
    mov bp, cx
    sub si, bp
        
    SHIFT1: 
        mov dh, INP[si + bp]
        mov INP[si], dh
        inc si
        CMP si, bx
        JNE SHIFT1
    xor di, di
    
    WRT11:
        mov dh, TEMP[di]
        mov INP[si], dh
        inc si
        inc di
        CMP si, ax
        JNE WRT11
    
    sub si, 08H
    sub bx, 03H
    sub ax, 04H
    dec bp
    loop LBIG1
    
    pop di
    
    ENDM   
       
 MACRO ADDKEY
    
           
    xor si, si    
                             
    addK: mov al, INP[si]
          mov ah, KEY[di]  
          xor ah, al
          mov INP[si], ah
          inc di
          inc si
          CMP si, 10H
          JNZ addK
    
    
   ENDM
 
 MACRO ADDKEY1
    
           
   xor si, si    
                             
   addK1: mov al, INP[si]
          mov ah, KEY[di]  
          xor ah, al
          mov INP[si], ah
          inc di
          inc si
          CMP si, 10H
          JNZ addK1
    
    
   ENDM
 
 MACRO ADDCKEY
    
    xor si, si
    
    addCK: mov al, INP[si]
           mov ah, CKEY[di]  
           xor ah, al
           mov INP[si], ah
           inc di
           inc si
           CMP si, 10H
           JNZ addCK
    xor di, di
    
    ENDM
 
 
  MACRO MIXCOLUMNS
    
    push di
    
    xor si, si
    xor di, di
    xor ax, ax
    xor dx, dx
    xor bp, bp
    xor bx, bx
    xor cx, cx    
    mov cl, 10H
    
BIGL:
    mov al, INP[si]
    mov dh, MIX[di]
    CMP dh, 02H
    JZ MUL2
    CMP dh, 03H
    JZ MUL3    
    
    FIN: add si, 04H
         inc di
         CMP di, 10H
         JZ ENDCOL
         CMP si, cx
         JNZ X
         mov si, bp
         xor ah, al
         mov TMP2[bx], ah
         add bx, 04H
         xor ax, ax
    X:   
         xor ah, al
         JMP BIGL
         
    ENDCOL: xor di, di    
            inc bp
            mov si, bp
            xor ah, al
            mov TMP2[bx], ah
            inc cx
            mov bx, bp
            CMP cx, 14H
            JZ HALT
            xor ax, ax
            
            JMP BIGL                
    
    MUL2: CMP al, 80H
          JAE CASE
          shl al, 1
          JMP FINMUL
          
          CASE: shl al, 1
                xor al, 1BH
                
          FINMUL: CMP MIX[di], 03H
                  JZ M3
                  JMP FIN
                         
    MUL3: mov dl, al
          JMP MUL2
    M3:   xor al, dl
          xor dl, dl
          JMP FIN  
    
    HALT: pop di
          
    
    ENDM
 
 
 MACRO COPY
    
    push di
    
    xor si, si
    xor ax, ax
    
    CLOOP: mov al, TMP2[si]
           mov INP[si], al
           inc si
           CMP si, 10H
           JNZ CLOOP
    pop di
    
 ENDM
 
 
 
 
 
 
 
  
.data segment
    SBOX DB 63H,7CH,77H,7BH,0F2H,6BH,6FH,0C5H,30H,01H,67H,2BH,0FEH,0D7H,0ABH,76H
         DB 0CAH,82H,0C9H,7DH,0FAH,59H,47H,0F0H,0ADH,0D4H,0A2H,0AFH,9CH,0A4H,72H,0C0H
         DB 0B7H,0FDH,93H,26H,36H,3FH,0F7H,0CCH,34H,0A5H,0E5H,0F1H,71H,0D8H,31H,15H
         DB 04H,0C7H,23H,0C3H,18H,96H,05H,9AH,07H,12H,80H,0E2H,0EBH,27H,0B2H,75H
         DB 09H,83H,2CH,1AH,1BH,6EH,5AH,0A0H,52H,3BH,0D6H,0B3H,29H,0E3H,2FH,84H
         DB 53H,0D1H,00H,0EDH,20H,0FCH,0B1H,5BH,6AH,0CBH,0BEH,39H,4AH,4CH,58H,0CFH
         DB 0D0H,0EFH,0AAH,0FBH,43H,4DH,33H,85H,45H,0F9H,02H,7FH,50H,3CH,9FH,0A8H
         DB 51H,0A3H,40H,8FH,92H,9DH,38H,0F5H,0BCH,0B6H,0DAH,21H,10H,0FFH,0F3H,0D2H
         DB 0CDH,0CH,13H,0ECH,5FH,97H,44H,17H,0C4H,0A7H,7EH,3DH,64H,5DH,19H,73H
         DB 60H,81H,4FH,0DCH,22H,2AH,90H,88H,46H,0EEH,0B8H,14H,0DEH,5EH,0BH,0DBH
         DB 0E0H,32H,3AH,0AH,49H,06H,24H,5CH,0C2H,0D3H,0ACH,62H,91H,95H,0E4H,79H
         DB 0E7H,0C8H,37H,6DH,8DH,0D5H,4EH,0A9H,6CH,56H,0F4H,0EAH,65H,7AH,0AEH,08H
         DB 0BAH,78H,25H,2EH,1CH,0A6H,0B4H,0C6H,0E8H,0DDH,74H,1FH,4BH,0BBH,8BH,8AH
         DB 70H,3EH,0B5H,66H,84H,03H,0F6H,0EH,61H,35H,57H,0B9H,86H,0C1H,1BH,9EH
         DB 0E1H,0F8H,98H,11H,69H,0D9H,8EH,94H,9BH,1EH,87H,0E9H,0CEH,55H,28H,0DFH
         DB 8CH,0A1H,89H,0DH,0BFH,0E6H,42H,68H,41H,99H,2DH,0FH,0B0H,54H,0BBH,16H

    INP  DB 19H, 0A0H, 9AH, 0E9H
         DB 3DH, 0F4H, 0C6H, 0F8H
         DB 0E3H, 0E2H, 8DH, 48H
         DB 0BEH, 2BH, 2AH, 08H
         
        
    TEMP DB 0h,0h,0h,0h
    
    MIX  DB 02H, 03H, 01H, 01H
         DB 01H, 02H, 03H, 01H
         DB 01H, 01H, 02H, 03H
         DB 03H, 01H, 01H, 02H
    
    CKEY DB 2BH, 28H, 0ABH, 09H
         DB 7EH, 0AEH, 0F7H, 0CFH
         DB 15H, 0D2H, 15H, 4FH
         DB 16H, 0A6H, 88H, 3CH 
    
     
    KEY  DB 0A0h, 088H, 023H, 02AH
         DB 0FAH, 054H, 0A3H, 006CH
         DB 0FEH, 2CH, 039H, 076H
         DB 17H, 0B1H, 39H, 05H
         
         DB 0F2H, 7AH, 59H, 73H
         DB 0C2H, 96H, 35H, 59H
         DB 95H, 0B9H, 80H, 0F6H
         DB 0F2H, 43H, 7AH, 7FH
         
         DB 3DH, 47H, 1EH, 6DH
         DB 80H, 16H, 23H, 7AH
         DB 47H, 0FEH, 7EH, 88H
         DB 7DH, 3EH, 44H, 3BH
         
         
         DB 0EFH, 0A8H, 0B6H, 0DBH
         DB 44H, 52H, 71H, 00BH
         DB 0A5H, 5BH, 25H, 0ADH
         DB 41H, 7FH, 3BH, 00H
         
         DB 0D4H, 7CH, 0CAH, 11H
         DB 0D1H, 83H, 0F2H, 0F9H
         DB 0C6H, 9DH, 0B8H, 15H
         DB 0F8H, 87H, 0BCH, 0BCH
         
         DB 6DH, 11H, 0DBH, 0CAH
         DB 88H, 0BH, 0F9H, 00H
         DB 0A3H, 3EH, 86H, 93H
         DB 7AH, 0FDH, 41H, 0FDH
         
         DB 4EH, 5FH, 84H, 4EH
         DB 54H, 5FH, 0A6H, 0A6H
         DB 0F7H, 0C9H, 4FH, 0DCH
         DB 0EH, 0F3H, 0B2H, 4FH
         
         DB 0EAH, 0B5H, 31H, 7FH
         DB 0D2H, 8DH, 2BH, 8DH
         DB 73H, 0BAH, 0F5H, 29H
         DB 21H, 0D2H, 60H, 2FH
         
         DB 0ACH, 19H, 28H, 57H
         DB 77H, 0FAH, 0D1H, 5CH
         DB 66H, 0DCH, 29H, 00H
         DB 0F3H, 21H, 41H, 6EH
         
         DB 0D0H, 0C9H, 0E1H, 0B6H
         DB 14H, 0EEH, 3FH, 63H
         DB 0F9H, 25H, 0CH, 0CH
         DB 0A8H, 89H, 0C8H, 0A6H  
    
    
    TMP2 DB 16 DUP(0)
    COUNTER DB 0H
    DATA_1 DB 33, ?, 33 DUP(?)
    DATA_2 DB 33, ?, 33 DUP(?)
    
.code segment
    
    xor di, di
    
    xor si, si    
         
    CALL READ ;To enter the input message to be encrypted
    
    ;CALL READ2 ;To enter the key to encrypt with
    
    ADDCKEY
    xor di, di
    
    
    MAIN:  
    
    SUBBYTE
    
    SHIFTROWS
    
    MIXCOLUMNS
    
    COPY
    
    ADDKEY
    
    inc COUNTER
    CMP COUNTER, 09H
    JNZ MAIN
    
    SUBBYTE1
    SHIFTROWS1
    ADDKEY1
    
    CALL WRITE
    ret
    
    
    PROC READ
    
    xor si, si
    mov si, 02H
    xor bp, bp
    
    mov dx, OFFSET DATA_1
    mov ah, 0AH
    xor al, al
    int 21H
    
    
    LOOPC: mov al, DATA_1[si]
    
           CMP al, 41H
           JGE LET
    
           sub al, 48
           JMP DIG
    
           LET: sub al, 55
           shl al, 4
           JMP T
           DIG: shl al, 4
           
        T: mov cl, DATA_1[si + 1]
           CMP cl, 41H
           JGE LET1
           sub cl, 48
           JMP FIN3
           
           LET1: sub cl, 55
           
           FIN3: add al, cl
           
           mov INP[bp], al
           
           
           add si, 02H
           inc bp
           CMP si, 33
           JBE LOOPC
    
    mov dl,13
    mov ah,2
    int 21h  
    mov dx,10
    mov ah,2
    int 21h
    ret
    READ ENDP
                
    WRITE PROC
        
      xor si, si
        
      WRT:  
        xor bx, bx
        mov bl, INP[si]
        shl bx, 04H
        
        shr bl, 4H
        CMP bl, 09H
        JBE DIGIT
        add bl, 55
        JMP HL
        
        DIGIT: add bl, 48  
        
        HL:   CMP bh, 09H
              JBE DIGITH
              add bh, 55
              JMP END
              DIGITH: add bh, 48    
              
        END: 
             mov dl, bh
             mov ah, 2H
             int 21H
             mov dl, bl
             int 21H
             mov dl, 20h
             int 21h
             
        inc si
        cmp si, 10H
        JNZ WRT  
        
    ret
    WRITE ENDP
    
     